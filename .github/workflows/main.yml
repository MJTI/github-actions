name: CI
on: workflow_dispatch

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - name: setup java 11
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
    - name: checkout repo
      uses: actions/checkout@v4
    - name: unit test
      run: mvn test
    - name: checkstyle test
      run: mvn checkstyle:checkstyle
    - name: upload reports to sonar
      uses: SonarSource/sonarqube-scan-action@v4.2.1
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_URL }}
        ORG_KEY: ${{ secrets.ORG_KEY }}
        PROJECT_KEY: ${{ secrets.PROJECT_KEY }}
      with:
        args: >
          -Dsonar.projectKey=${{ env.PROJECT_KEY }}
          -Dsonar.organization=${{ env.ORG_KEY }}
          -Dsonar.projectVersion=${{ github.event.repository.updated_at}}
          -Dsonar.java.binaries=target/classes/com/
          -Dsonar.junit.reportsPath=target/surefire-reports/
          -Dsonar.jacoco.reportsPath=target/jacoco.exec
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_URL }}

    - name: build and push image to AWS ECR
      uses: kciter/aws-ecr-action@master
      with:
        access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        repo: ${{ vars.ECR_REPOSITORY }}
        region: ${{ vars.AWS_REGION }}
        tags: latest,${{ github.run_number }}
    
    ## add updating the image in the AWS ECS service

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Download task definition 
      run: |
       aws ecs describe-task-definition --task-definition stage_cluster:3 - query taskDefinition > task-definition.json

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1 
      with:
       task-definition: task-definition.json
       service: stage-service
       cluster: stage-mjti




