name: CICD
on:
  push:
    branches:
      - main
env:
  CLUSTER_NAME: stage-mjti
  SERVICE_NAME: stage-service
  CONTAINER_NAME: mjti-app

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Java 11
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Checkout Repo
      uses: actions/checkout@v4

    - name: Maven Test
      run: mvn test

    - name: Checkstyle Test
      run: mvn checkstyle:checkstyle

    - name: Upload Reports To Sonar
      uses: SonarSource/sonarqube-scan-action@v4.2.1
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_URL }}
        ORG_KEY: ${{ secrets.ORG_KEY }}
        PROJECT_KEY: ${{ secrets.PROJECT_KEY }}
      with:
        args: >
          -Dsonar.projectKey=${{ env.PROJECT_KEY }}
          -Dsonar.organization=${{ env.ORG_KEY }}
          -Dsonar.projectVersion=${{ github.event.repository.updated_at}}
          -Dsonar.java.binaries=target/test-classes/com/
          -Dsonar.sources=src/
          -Dsonar.junit.reportsPath=target/surefire-reports/
          -Dsonar.jacoco.reportsPath=target/jacoco.exec
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml

    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_URL }}


  Build_and_Publish:
    needs: Testing
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v4

    - name: Update application.properties file
      run: |
        sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
        sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.RDS_PASS }}/" src/main/resources/application.properties
        sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties

    - name: Build And Push Image To ECR
      uses: kciter/aws-ecr-action@master
      with:
        access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        repo: ${{ vars.ECR_REPOSITORY }}
        region: ${{ vars.AWS_REGION }}
        tags: latest,${{ github.run_number }}


  Deploy:
    needs: Build_and_Publish
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login To Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Download Task Definition 
      run: |
       aws ecs describe-task-definition --task-definition stage_cluster --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ secrets.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ github.run_number }}

    - name: Deploy Amazon ECS Task Definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
       task-definition: ${{ steps.task-def.outputs.task-definition }}
       service: ${{ env.SERVICE_NAME }}
       cluster: ${{ env.CLUSTER_NAME }}



